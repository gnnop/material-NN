import numpy as np
import itertools
import re
import sys
import csv
import jax

#entry format:
"""
b'generated by phonopy\n
   1.0\n
   -4.2915000000000001    4.2915000000000001    4.4085000000000001\n
   4.2915000000000001   -4.2915000000000001    4.4085000000000001\n
   4.2915000000000001    4.2915000000000001   -4.4085000000000001\n
   O Na Si Be Al Cl\n
   12    4    4    1    1    1\n
   Direct\n
   0.7040000000000001  0.4237000000000000  0.0139000000000001\n
   0.4097999999999998  0.6900999999999999  0.9860999999999999\n
   0.3099000000000001  0.2959999999999999  0.7196999999999999\n
   0.5763000000000000  0.5902000000000002  0.2803000000000001\n
   0.6955000000000000  0.3126000000000000  0.3105000000000000\n
   0.0021000000000000  0.3850000000000000  0.6895000000000000\n
   0.6150000000000000  0.3045000000000000  0.6171000000000000\n
   0.6874000000000000  0.9979000000000000  0.3829000000000000\n
   0.2913999999999999  0.7146999999999999  0.2754999999999999\n
   0.4392000000000000  0.0159000000000000  0.7245000000000001\n
   0.9841000000000000  0.7086000000000001  0.4233000000000000\n
   0.2853000000000001  0.5608000000000000  0.5767000000000000\n
   0.9760000000000000  0.6214999999999999  0.9604999999999999\n
   0.6610000000000000  0.0155000000000000  0.0395000000000001\n
   0.9844999999999999  0.0240000000000000  0.6455000000000000\n
   0.3785000000000001  0.3390000000000000  0.3545000000000000\n
   0.5178000000000000  0.2508999999999999  0.7599000000000000\n
   0.4909999999999999  0.7579000000000000  0.2401000000000000\n
   0.2421000000000000  0.4822000000000000  0.7330999999999999\n
   0.7491000000000001  0.5090000000000001  0.2669000000000001\n
   0.7500000000000000  0.2500000000000000  0.5000000000000000\n
   0.2500000000000000  0.7500000000000000  0.5000000000000000\n
   0.0000000000000000  0.0000000000000000  0.0000000000000000\n'
"""

completeTernary = list(itertools.product([-1, 0, 1], repeat=3))


#to make this line up slightly better, I
#attach the f orbital stuff to the right side of the
#periodic table. This makes sense, since the cols
#aren't labelled
#also, I'm just going to chuck the bottom row
#of the table, no one wants those elements
def atomToCoords(name):
    match name:
        case "H":
            return [0, 0, 0]
        case "He":
            return [0, 0, 1]#different, i likey here
        case "Li":
            return [1, 0, 0]
        case "Be":
            return [1, 0, 1]
        case "B":
            return [1, 6, 0]
        case "C":
            return [1, 6, 1]
        case "N":
            return [1, 7, 0]
        case "O":
            return [1, 7, 1]
        case "F":
            return [1, 8, 0]
        case "Ne":
            return [1, 8, 1]
        case "Na":
            return [2, 0, 0]
        case "Mg":
            return [2, 0, 1]
        case "Al":
            return [2, 6, 0]
        case "Si":
            return [2, 6, 1]
        case "P":
            return [2, 7, 0]
        case "S":
            return [2, 7, 1]
        case "Cl":
            return [2, 8, 0]
        case "Ar":
            return [2, 8, 1]
        case "K":
            return [3, 0, 0]
        case "Ca":
            return [3, 0, 1]
        case "Sc":
            return [3, 1, 0]
        case "Ti":
            return [3, 1, 1]
        case "V":
            return [3, 2, 0]
        case "Cr":
            return [3, 2, 1]
        case "Mn":
            return [3, 3, 0]
        case "Fe":
            return [3, 3, 1]
        case "Co":
            return [3, 4, 0]
        case "Ni":
            return [3, 4, 1]
        case "Cu":
            return [3, 5, 0]
        case "Zn":
            return [3, 5, 1]
        case "Ga":
            return [3, 6, 0]
        case "Ge":
            return [3, 6, 1]
        case "As":
            return [3, 7, 0]
        case "Se":
            return [3, 7, 1]
        case "Br":
            return [3, 8, 0]
        case "Kr":
            return [3, 8, 1]
        case "Rb":
            return [4, 0, 0]
        case "Sr":
            return [4, 0, 1]
        case "Y":
            return [4, 1, 0]
        case "Zr":
            return [4, 1, 1]
        case "Nb":
            return [4, 2, 0]
        case "Mo":
            return [4, 2, 1]
        case "Tc":
            return [4, 3, 0]
        case "Ru":
            return [4, 3, 1]
        case "Rh":
            return [4, 4, 0]
        case "Pd":
            return [4, 4, 1]
        case "Ag":
            return [4, 5, 0]
        case "Cd":
            return [4, 5, 1]
        case "In":
            return [4, 6, 0]
        case "Sn":
            return [4, 6, 1]
        case "Sb":
            return [4, 7, 0]
        case "Te":
            return [4, 7, 1]
        case "I":
            return [4, 8, 0]
        case "Xe":
            return [4, 8, 1]
        case "Cs":
            return [5, 0, 0]
        case "Ba":
            return [5, 0, 1]
        case "Lu":
            return [5, 1, 0]
        case "Hf":
            return [5, 1, 1]
        case "Ta":
            return [5, 2, 0]
        case "W":
            return [5, 2, 1]
        case "Re":
            return [5, 3, 0]
        case "Os":
            return [5, 3, 1]
        case "Ir":
            return [5, 4, 0]
        case "Pt":
            return [5, 4, 1]
        case "Au":
            return [5, 5, 0]
        case "Hg":
            return [5, 5, 1]
        case "Tl":
            return [5, 6, 0]
        case "Pb":
            return [5, 6, 1]
        case "Bi":
            return [5, 7, 0]
        case "Po":
            return [5, 7, 1]
        case "At":
            return [5, 8, 0]
        case "Rn":
            return [5, 8, 1]
        case "Fr":
            return [6, 0, 0]
        case "Ra":
            return [6, 0, 1]
        case "Lr":
            return [6, 1, 0]
        case "Rf":
            return [6, 1, 1]
        case "Db":
            return [6, 2, 0]
        case "Sg":
            return [6, 2, 1]
        case "Bh":
            return [6, 3, 0]
        case "Hs":
            return [6, 3, 1]
        case "Mt":
            return [6, 4, 0]
        case "Ds":
            return [6, 4, 1]
        case "Rg":
            return [6, 5, 0]
        case "Cn":
            return [6, 5, 1]
        case "Nh":
            return [6, 6, 0]
        case "Fl":
            return [6, 6, 1]
        case "Mc":
            return [6, 7, 0]
        case "Lv":
            return [6, 7, 1]
        case "Ts":
            return [6, 8, 0]
        case "Og":
            return [6, 8, 1]
        case "La":
            return [5, 9, 0]
        case "Ce":
            return [5, 9, 1]
        case "Pr":
            return [5, 10, 0]
        case "Nd":
            return [5, 10, 1]
        case "Pm":
            return [5, 11, 0]
        case "Sm":
            return [5, 11, 1]
        case "Eu":
            return [5, 12, 0]
        case "Gd":
            return [5, 12, 1]
        case "Tb":
            return [5, 13, 0]
        case "Dy":
            return [5, 13, 1]
        case "Ho":
            return [5, 14, 0]
        case "Er":
            return [5, 14, 1]
        case "Tm":
            return [5, 15, 0]
        case "Yb":
            return [5, 15, 1]
        case "Ac":
            return [6, 9, 0]
        case "Th":
            return [6, 9, 1]
        case "Pa":
            return [6, 10, 0]
        case "U":
            return [6, 10, 1]
        case "Np":
            return [6, 11, 0]
        case "Pu":
            return [6, 11, 1]
        case "Am":
            return [6, 12, 0]
        case "Cm":
            return [6, 12, 1]
        case "Bk":
            return [6, 13, 0]
        case "Cf":
            return [6, 13, 1]
        case "Es":
            return [6, 14, 0]
        case "Fm":
            return [6, 14, 1]
        case "Md":
            return [6, 15, 0]
        case "No":
            return [6, 15, 1]
        case _:
            print(name)
            exit()

def serializeAtom(atom, poscar, index):
    atomRep = atomToCoords(atom)
    rw = [0.0]*7
    cl = [0.0]*16
    sp = [0.0]*1
    rw[atomRep[0]] = 1.0
    cl[atomRep[1]] = 1.0
    sp[0] = atomRep[2]#The spin is a single bit, so we drop it in one thing
    return [*unpackLine(poscar[8+index]), *cl, *rw, *sp]

def serializeSpaceGroup(num):
    if 1<=num<=1:
        return 0
    elif 2<=num<=2:
        return 1
    elif 3<=num<=5:
        return 2
    elif 6<=num<=9:
        return 3
    elif 10<=num<=15:
        return 4
    elif 16<=num<=24:
        return 5
    elif 25<=num<=46:
        return 6
    elif 47<=num<=74:
        return 7
    elif 75<=num<=80:
        return 8
    elif 81<=num<=82:
        return 9
    elif 83<=num<=88:
        return 10
    elif 89<=num<=98:
        return 11
    elif 99<=num<=110:
        return 12
    elif 111<=num<=122:
        return 13
    elif 123<=num<=142:
        return 14
    elif 143<=num<=146:
        return 15
    elif 147<=num<=148:
        return 16
    elif 149<=num<=155:
        return 17
    elif 156<=num<=161:
        return 18
    elif 162<=num<=167:
        return 19
    elif 168<=num<=173:
        return 20
    elif 174<=num<=174:
        return 21
    elif 175<=num<=176:
        return 22
    elif 177<=num<=182:
        return 23
    elif 183<=num<=186:
        return 24
    elif 187<=num<=190:
        return 25
    elif 191<=num<=194:
        return 26
    elif 195<=num<=199:
        return 27
    elif 200<=num<=206:
        return 28
    elif 207<=num<=214:
        return 29
    elif 215<=num<=220:
        return 30
    elif 221<=num<=230:
        return 31
    else:
        print(num)
        exit()

#We have the following data flow:
#SM:
#  ES
#  ESFD
#TI:
#  NLC
#  SEBR
#trivial:
#  LCEBR
#other - error

def convertTopoToIndex(rows, topo):
    if topo == "f":
        arr = [0.0]*5
        match rows[5].strip():
            case "ES":
                arr[0] = 1.0
            case "ESFD":
                arr[1] = 1.0
            case "NLC":
                arr[2] = 1.0
            case "SEBR":
                arr[3] = 1.0
            case "LCEBR":
                arr[4] = 1.0
    else:
        arr = [0.0]*3
        match rows[4].strip():
            case "trivial":
                arr[0] = 1.0
            case "TI":
                arr[1] = 1.0
            case "SM":
                arr[2] = 1.0
    return arr

maxSize = 60
atomSize = 27


def unpackLine(str):
    x = str.split()
    return list(map(float, x))


def getGlobalData(poscar, row, spec_str):
    a = np.array(unpackLine(poscar[2]))
    b = np.array(unpackLine(poscar[3]))
    c = np.array(unpackLine(poscar[4]))
    alpha = np.arccos(np.dot(b, c) / (np.linalg.norm(b) * np.linalg.norm(c))) / np.pi
    beta = np.arccos(np.dot(a, c) / (np.linalg.norm(a) * np.linalg.norm(c))) / np.pi
    gamma = np.arccos(np.dot(b, a) / (np.linalg.norm(b) * np.linalg.norm(a))) / np.pi

    if spec_str == "f":
        return [np.linalg.norm(a), np.linalg.norm(b), np.linalg.norm(c), alpha, beta, gamma,
                *np.unpackbits(np.array([int(row[2].strip())],dtype=np.uint8))] #6 + log(128) = 13 +1 because there's a useless bit
    elif spec_str == "c":
        return [np.linalg.norm(a), np.linalg.norm(b), np.linalg.norm(c), alpha, beta, gamma, 
            *jax.nn.one_hot(serializeSpaceGroup(int(row[2].strip())), 32)] #6 + 32 = 38
    else:
        return [np.linalg.norm(a), np.linalg.norm(b), np.linalg.norm(c), alpha, beta, gamma] #6

def getGlobalDataVector(poscar):
    return np.array([unpackLine(poscar[2]), unpackLine(poscar[3]), unpackLine(poscar[4])])

globals = {
    "dataSize" : 0,
    "labelSize" : 0
}

def cmd_line(func, name):
    global globals
    if len(sys.argv) == 4:
        #sanity check:
        if not (sys.argv[2] == "f" or sys.argv[2] == "c" or sys.argv[2] == "n"):
            print("symmetry not specified, use f, c, n : full, compressed, nan")
            exit()
        
        if not (sys.argv[3] == "f" or sys.argv[3] == "c"):
            print("topology not specified, use f, c : full, compressed")
            exit()
        
        if sys.argv[2] == "f":
            globals["dataSize"] = 14
        elif sys.argv[2] == "c":
            globals["dataSize"] = 38
        else:
            globals["dataSize"] = 6
        
        if sys.argv[3] == "f":
            globals["labelSize"] = 5
        else:
            globals["labelSize"] = 3

        func(sys.argv[1] + ".csv", "./data/" + sys.argv[1] + "-" + sys.argv[2] + "-" + sys.argv[3] + "-" + name +"-data.obj", sys.argv[2], sys.argv[3])
    else:
        if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
            print("The first command is file name.")
            print("The next two are sym and topo-label, and they are f(ull), c(ompressed), or n(an)")
        else:
            print(sys.argv)
            print("please use -h")
        exit()
